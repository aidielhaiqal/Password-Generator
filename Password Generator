import random
import string
import tkinter as tk
from tkinter import messagebox
import openpyxl
from datetime import datetime

# Function to generate a random password with symbols
def generate_password():
    characters = string.ascii_letters + string.digits + "!$-*"
    password = ''.join(random.choice(characters) for i in range(12))
    return password

# Function to handle the generate button click
def generate_login():
    user_id = entry_id.get()
    if not user_id:
        messagebox.showerror("Error", "Please enter SI number")
        return
    
    username = user_id
    password = generate_password()
    
    entry_username.config(state='normal')
    entry_username.delete(0, tk.END)
    entry_username.insert(0, username)
    entry_username.config(state='readonly', bg="white", relief="solid")
    
    entry_password.config(state='normal')
    entry_password.delete(0, tk.END)
    entry_password.insert(0, password)
    entry_password.config(state='readonly', bg="white", relief="solid")
    
    label_status.config(text="Complete", fg="green")
    
    # Save the generated username and password to Excel
    save_to_excel(username, password)
    
    # Update the history display
    update_history_display()

# Function to handle the clear button click
def clear_fields():
    entry_id.delete(0, tk.END)
    
    entry_username.config(state='normal')
    entry_username.delete(0, tk.END)
    entry_username.config(state='readonly', bg=root.cget('bg'), relief="flat")
    
    entry_password.config(state='normal')
    entry_password.delete(0, tk.END)
    entry_password.config(state='readonly', bg=root.cget('bg'), relief="flat")
    
    label_status.config(text="")

# Function to copy username to clipboard
def copy_username():
    root.clipboard_clear()
    root.clipboard_append(entry_username.get())

# Function to copy password to clipboard
def copy_password():
    root.clipboard_clear()
    root.clipboard_append(entry_password.get())

# Function to save the generated username and password to Excel with reduced timestamp
def save_to_excel(username, password):
    timestamp = datetime.now().strftime("%d/%m %H:%M")
    
    try:
        workbook = openpyxl.load_workbook("password_history.xlsx")
        sheet = workbook.active
    except FileNotFoundError:
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["Username", "Password", "Time"])
    
    sheet.append([username, password, timestamp])
    workbook.save("password_history.xlsx")

# Function to update the history display in the main window with timestamp and remove option
def update_history_display():
    try:
        workbook = openpyxl.load_workbook("password_history.xlsx")
        sheet = workbook.active
        
        history_text.config(state='normal')
        history_text.delete(1.0, tk.END)
        
        for i, row in enumerate(sheet.iter_rows(values_only=True)):
            if i == 0:  # Skip header row
                continue
            
            history_text.insert(tk.END, f"Username: {row[0]}, Password: {row[1]}, Time: {row[2]} ")
            remove_button = tk.Button(history_text, text="Remove", command=lambda i=i: remove_history(i))
            history_text.window_create(tk.END, window=remove_button)
            history_text.insert(tk.END, "\n")
        
        history_text.config(state='disabled')
        
    except FileNotFoundError:
        messagebox.showerror("Error", "No history found")

# Function to remove a specific history item from Excel and update display
def remove_history(index):
    try:
        workbook = openpyxl.load_workbook("password_history.xlsx")
        sheet = workbook.active
        
        sheet.delete_rows(index + 1)  # Adjust for header row
        
        workbook.save("password_history.xlsx")
        
        update_history_display()
        
    except FileNotFoundError:
        messagebox.showerror("Error", "No history found")

# Create the main window
root = tk.Tk()
root.title("Password Generator")

# Create and place the widgets
label_id = tk.Label(root, text="Enter ID:")
label_id.grid(row=0, column=0, padx=10, pady=10)

entry_id = tk.Entry(root)
entry_id.grid(row=0, column=1, padx=10, pady=10)

button_generate = tk.Button(root, text="Generate Login", command=generate_login)
button_generate.grid(row=1, column=0, padx=10, pady=10)

button_clear = tk.Button(root, text="Clear", command=clear_fields)
button_clear.grid(row=1, column=1, padx=10, pady=10)

label_username = tk.Label(root, text="USERNAME: ")
label_username.grid(row=2, column=0, padx=10, pady=10)

entry_username = tk.Entry(root, state='readonly')
entry_username.grid(row=2, column=1, padx=10, pady=10)

button_copy_username = tk.Button(root, text="Copy", command=copy_username)
button_copy_username.grid(row=2, column=2, padx=10, pady=10)

label_password = tk.Label(root, text="PASSWORD: ")
label_password.grid(row=3, column=0, padx=10, pady=10)

entry_password = tk.Entry(root, state='readonly')
entry_password.grid(row=3, column=1, padx=10, pady=10)

button_copy_password = tk.Button(root, text="Copy", command=copy_password)
button_copy_password.grid(row=3, column=2, padx=10, pady=10)

label_history = tk.Label(root, text="History:")
label_history.grid(row=4, columnspan=3)

history_text = tk.Text(root, state='disabled', height=10)
history_text.grid(row=5, columnspan=3)

label_status = tk.Label(root, text="")
label_status.grid(row=6, columnspan=3, padx=10, pady=10)

# Run the application
root.mainloop()
